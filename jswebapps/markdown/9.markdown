# 第9章 测试和调试

从某种程度上说，每个开发者在开发过程中都需要测试。起码手动执行代码也是一种测试。但本章将要讲的是JavaScript自动化测试，编写特定的断言并自动的执行它们。自动化测试不会消除程序中的bug，但的确是一种必要的手段来减少程序出现瑕疵的几率并避免代码库出现较旧的bug。测试有很多类型，而且网上已经有很多相关的学习资料。关于测试的基本原理和概念性的东西本章不再赘述。这里只关注基于JavaScript的测试以及和其他语言区别。

很多人认为JavaScript中的测试是一种鸡肋，因此多数JavaScript开发者没有为他们的程序写测试代码。在我看来主要原因是JavaScript的自动化测试非常困难，且不具备可伸缩性【译注1】。我们以jQuery为例，jQuery库中包含一百多个测试单元和大约十种不同的测试分组，模拟在不同环境中的运行场景。每次测试都要运行所有的测试用例。jQuery支持的浏览器包括：

【译注1：相比传统的软件开发，Web应用的需求变化更加频繁，因此测试用例也在不断变化，这对自动化测试来说是一个挑战，另外，由于多数JavaScript功能的模块化和API的设计并不完善，编程模式和约定也不统一，导致某个功能的测试用例很难被复用，甚者，测试代码会随着需求的增加呈指数级的增长，这也就是作者所说的“不具备可伸缩性”】

- Safari: 3.2, 4, 5, 午夜版
- Chrome: 8, 9, 10, 11
- Internet Explorer: 6, 7, 8, 9
- Firefox: 2, 3, 3.5, 3.6, 午夜版
- Opera: 9.6, 10, 11

因此，jQuery总共需要支持五大浏览器的二十多个版本，每个测试单元都要在所有浏览器中测试通过。你会发现测试的量级已经开始呈指数级增长了，我们甚至还没考虑到各个平台的情况【译注：指各种操作系统、PC、Mac机和各种移动终端】！因此这种测试根本不具备可伸缩性。

显然，jQuery是特例，只是为了说明问题到底有多糟。你的程序所兼容的浏览器往往不超过jQuery支持浏览器的二分之一，所以你也不需要这么多测试用例。然而，你必须针对你的应用所兼容的浏览器作充分测试。

在接下来的讨论之前，有必要先看下各大浏览器的市场占有率，因为这个统计会最终决定前端开发工程师做开发所依赖的浏览器类型和版本。但这个占有率的数据变化非常快，今天的统计数据可能明天就会过时，但大致的趋势是不会变的。

浏览器的市场占有率的统计结果往往取决于数据采样的维度。不同的国家统计结果也不一样，这和每个国家互联网用户的专业程度有关。比如，下面的统计数据来自于Statcounter.com，是2011年欧洲的数据：

- Safari: 4%
- Chrome: 15%
- IE: 36%
- Firefox: 37%
- Opera: 2%

IE的占有率在不断减少，而Firefox和Chome的占有率在不断攀升，这种趋势会一直持续下去。IE6早已是明日黄花风光不再了，占有率也跌至个位数。现在也只有为企业或政府部门开发网站时会考虑那些上了年纪的用户，除此之外基本不必再担心如何去兼容这些古老的浏览器了【译注：根据淘宝网的统计数据，IE6的占有率仍然接近半数，所以作者所说的情况并不适用于中国大陆】。

古人云，“世界上有三种谎言：谎话，弥天大谎，还有统计数字”【译注2】。这句话用在浏览器的统计上再合适不过了。比如我的博客的流量统计显示IE占5%，低于国家的平均值。换句话说，你所看到的统计数据是跟你网站的用户群有关系的。如果你的站点是科技类、或喜欢炫一些花哨技术的站点，那么使用Friefox和Chrome的用户比例会非常高，而更多的主流网站的统计数据则能更好的反映国家的平均水平。首先考虑你的站点主要面向哪些人提供服务，然后决定要支持哪些浏览器，而不要太迷信统计数据。然而，根据经验来看，推荐大家主要测试这些浏览器【译注3】：

【译注2：这句谚语据说最初出自英国前首相本杰明·迪斯雷利之口（Benjamin Disraeli），不过它的广泛流传却是因为马克·吐温的引用，意思是说统计数字不靠谱】

【译注3：雅虎最早提出了浏览器分级支持（GBS），即根据功能需求的权重来将浏览器支持划分多个级别，并且非常详细系统的定义了浏览器测试基准和操作系统支持标准，请参照：http://yuilibrary.com/yui/docs/tutorials/gbs/，而作者在这里提到的主流浏览器更多的适用于Web App，并非所有的Web页面】

- IE 8, 9
- Firefox 3.6【译注：撰写本书时的Firefox版本还是3.6，从Firefox4之后版本升级非常快，最重要的一点不同是Firefox 3.6遵循ECMAScript3，而4及以后的版本则遵循EMCAScript5，因此这里更推荐使用Firefox 4+】
- Safari 5
- Chrome 11

如果你不清楚你的网站访问来源的统计数据，也不知道用户用了哪些浏览器访问你的站点，就需猜测网站用户的受教育情况。不管通过什么方式，只要确定下来你的网站需要兼容的浏览器类型和版本，接下来就是写自动化测试，来确保你的应用能在这些浏览器中都正常运行。

## 单元测试

手工测试更像集成测试，从更高层次上保证应用的正常运行。单元测试则是更低层次的测试，确保特定的后台代码片段能正常运行。单元测试更多的是为了发现浏览器兼容性bug，但这些bug的解决相对容易，因为被测试的代码片段往往很短。

单元测试的另一个优势是为自动化测试铺平道路。在本章后续的小节中会有深入讨论。将很多单元测试整合起来就可以做到连续的集成测试了，每次代码有更新时都重新执行一遍所有的单元测试。这要比对应用做手动回归测试省时省力的多，并可确保每一处代码的小改动都不会影响到应用中其他的功能。

现在有很多JavaScript单元测试类库，每种库都各有优缺点。接下来会介绍一些主流的测试类库，但使用这些类库之前要理解测试的基本原理。

### 断言

断言是测试的核心【译注：很多初学者将断言和测试用例混为一谈，断言是用来检查测试用例中的条件的，理论上断言是测试用例的子集】，它们决定了哪些测试会通过、哪些会失败。断言是一些表述代码期望执行结果的语句。如果断言不正确，则测试失败，你就会知道代码出了问题。

比如，这里有一个简单的assets()函数，本书中还有很多其他示例代码会用到它：

	var asset = function(value, msg) {
		if ( !value )
			throw(msg || (value + " does not equal true"));
	};

它得到一个值和一个可选的字符串消息。如果值不是true，那么断言失败：

	// 这些断言均失败
	assert( false );
	assert( "" );
	assert( 0 );

JavaScript中在希望使用布尔值的地方使用了undefined、0、和null这些值都会被转换为false。换句话说，下面这个assert可以对null做检查：

	// 如果语句是null，则断言失败
	assert( User.first() );

类型转换多少会影响你的测试，因此有必要在类型转换之前首先检查值的类型，以避免很多怪异的代码引起各种奇怪的问题。







